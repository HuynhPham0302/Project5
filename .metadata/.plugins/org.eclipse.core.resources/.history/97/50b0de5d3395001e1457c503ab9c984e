package huynhpham;

//
//	Name: Pham, Huynh
//	Project: 5
//	Due: 12/08/2023
//	Course: cs-2400-02-f23
//
//	Description:
//		The project uses a Graph to store airport and distance information. 
//		Use Dijkstra's algorithm to find the shortest distances between airports
//

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Iterator;
import java.util.Scanner;


public class AirportApp {
    public static void main(String[] args) {
    	
    	System.out.println("Airport v0.1 by H. Pham");
    	Scanner sc = new Scanner(System.in);
    	
        GraphInterface<String> airportGraph = new DirectedGraph<>();
        DictionaryInterface<String, String> airportInformation = new HashedDictionary<>();
        
        
        readDataFiles(airportGraph);
        readAirportInformation(airportInformation);

        
        while (true) {
            System.out.print("Command? ");
            String command = sc.nextLine();
            
            switch (command) {
                case "Q":
                	Scanner sc2 = new Scanner(System.in);
                	System.out.print("Airport code? ");
                    String airportCode = sc2.nextLine();
                	
                	queryAirportInfo(airportCode, airportInformation);
                	
                    break;
                case "H":
                    displayMenu();
                    break;
                case "E":
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid command.");
            }
        }
    } 

    private static void displayMenu() {
        System.out.println("Q Query the airport information by entering the airport code.");
        System.out.println("D Find the minimum distance between two airports.");
        System.out.println("H Display this message.");
        System.out.println("E Exit.");
    }
    
    private static void queryAirportInfo(String airportCode, DictionaryInterface<String, String> airportInformation) {
        
        

        if (airportInformation.contains(airportCode)) {
            System.out.println(airportInformation.getValue(airportCode));
        } else {
            System.out.println("Airport code unknown");
        }
    }
    
    private static void findMinimumDistance(String fromAirport, String toAirport, GraphInterface<String> airportGraph, DictionaryInterface<String, String> airportInformation) {
        
        
        
        if(!airportInformation.contains(fromAirport) || !airportInformation.contains(toAirport)) {
        	System.out.println("Airport code unknown");
        }else {
        	StackInterface<String> path = new LinkedStack<>();
            double distance = airportGraph.getCheapestPath(fromAirport, toAirport, path);

            if (distance != 0) {
                System.out.println("The minimum distance between " + airportInformation.getValue(fromAirport) + " and " + airportInformation.getValue(toAirport) +
                        " is " + distance + " through the route:");
                while (!path.isEmpty()) {
                    String airport = path.pop();
                    Iterator<String> keyIterator = airportInformation.getKeyIterator();
                	while(keyIterator.hasNext()) {
                		String key = keyIterator.next();
                		if(key.equals(airport)) {
                			System.out.println(key + " - " + airportInformation.getValue(key));
                		}
                	}
                }
            } else {
                System.out.println("Airports not connected");
            }
        }
    }

    
    private static void readAirportInformation(DictionaryInterface<String, String> dictionary) {
    	try {
            // Read airports.csv
            BufferedReader airportsReader = new BufferedReader(new FileReader("airports.csv"));
            String airportsLine;
            while ((airportsLine = airportsReader.readLine()) != null) {
                String[] airportData = airportsLine.split(",");
                String airportCode = airportData[0];
                String airportInfo = airportData[1];
                dictionary.add(airportCode, airportInfo);
            }
            airportsReader.close();
    	} catch (IOException e) {
            e.printStackTrace();
        }
    }
    private static void readDataFiles(GraphInterface<String> airportGraph) {
        try {
            // Read airports.csv
            BufferedReader airportsReader = new BufferedReader(new FileReader("airports.csv"));
            String airportsLine;
            while ((airportsLine = airportsReader.readLine()) != null) {
                String[] airportData = airportsLine.split(",");
                String airportCode = airportData[0];
                //String airportInfo = airportData[1];
                airportGraph.addVertex(airportCode);
            }
            airportsReader.close();

            // Read distances.csv
            BufferedReader distancesReader = new BufferedReader(new FileReader("distances.csv"));
            String distancesLine;
            while ((distancesLine = distancesReader.readLine()) != null) {
                String[] distanceData = distancesLine.split(",");
                String sourceAirport = distanceData[0];
                String destinationAirport = distanceData[1];
                double distance = Double.parseDouble(distanceData[2]);
                airportGraph.addEdge(sourceAirport, destinationAirport, distance);
            }
            distancesReader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
