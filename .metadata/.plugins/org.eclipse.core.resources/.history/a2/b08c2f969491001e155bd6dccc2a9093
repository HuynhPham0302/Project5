package huynhpham;

import java.util.Iterator;

public class DirectedGraph<T extends Comparable<? super T>> implements GraphInterface<T> {
	
	private DictionaryInterface<T, VertexInterface<T>> vertices;
	private int edgeCount;
	
	public DirectedGraph() {
		vertices = new HashedDictionary<>();
		edgeCount = 0;
	}

	public boolean addVertex(T vertexLabel) {
		return addVertex(vertexLabel, null);
	}
	
	@Override
	public boolean addVertex(T vertexLabel, String airportInfo) {
		VertexInterface<T> addOutcome = vertices.add(vertexLabel, new Vertex<>(vertexLabel, airportInfo));
		return addOutcome == null;
	}

	@Override
	public boolean addEdge(T begin, T end, double edgeWeight) {
		boolean result = false;
		VertexInterface<T> beginVertex = vertices.getValue(begin);
		VertexInterface<T> endVertex = vertices.getValue(end);
		if(beginVertex != null && endVertex != null) {
			result = beginVertex.connect(endVertex, edgeWeight);
		}
		if(result) {
			edgeCount++;
		}
		return result;
	}

	@Override
	public boolean addEdge(T begin, T end) {
		return addEdge(begin, end, 0);
	}

	@Override
	public boolean hasEdge(T begin, T end) {
		boolean found = false;
		VertexInterface<T> beginVertex = vertices.getValue(begin);
		VertexInterface<T> endVertex = vertices.getValue(end);
		if(beginVertex != null && endVertex != null) {
			Iterator<VertexInterface<T>> neighbors = beginVertex.getNeighborIterator();
			while(!found && neighbors.hasNext()) {
				VertexInterface<T> nextNeighbor = neighbors.next();
				if(endVertex.equals(nextNeighbor))
					found = true;
			}
		}
		return found;
	}

	@Override
	public boolean isEmpty() {
		return vertices.isEmpty();
	}

	@Override
	public void clear() {
		vertices.clear();
		edgeCount = 0;
		
	}

	@Override
	public int getNumberOfVertices() {
		return vertices.getSize();
	}

	@Override
	public int getNumberOfEdges() {
		return edgeCount;
	}
	
	protected void resetVertices() {
		Iterator<VertexInterface<T>> vertexIterator = vertices.getValueIterator();
		while(vertexIterator.hasNext()) {
			VertexInterface<T> nextVertex = vertexIterator.next();
			nextVertex.unvisit();
			nextVertex.setCost(0);
			nextVertex.setPredecessor(null);
		}
	}
	
	
	@Override
	public QueueInterface<T> getBreadthFirstTraversal(T origin) {
		
		resetVertices();
		QueueInterface<T> traversalOrder = new LinkedQueue<>();
		QueueInterface<VertexInterface<T>> vertexQueue = new LinkedQueue<>();
		
		VertexInterface<T> originVertex = vertices.getValue(origin);
		
		
		originVertex.visit();
		
		traversalOrder.enqueue(origin);
		vertexQueue.enqueue(originVertex);
		
		
		while (!vertexQueue.isEmpty()) {
			VertexInterface<T> frontVertex = vertexQueue.dequeue();
			Iterator<VertexInterface<T>> neighbors = frontVertex.getNeighborIterator();
			
			while (neighbors.hasNext()) {
				VertexInterface<T> nextNeighbor = neighbors.next();
				if (!nextNeighbor.isVisited()) {
					nextNeighbor.visit();
					traversalOrder.enqueue(nextNeighbor.getLabel());
					vertexQueue.enqueue(nextNeighbor);
				} // end if
			} // end while
		} // end while
		return traversalOrder;
	}
	
	@Override
    public double getCheapestPath(T originVertex, T endVertex, StackInterface<T> path) {
        resetVertices(); // Reset vertices before performing the algorithm

        PriorityQueueInterface<EntryPQ> priorityQueue = new MinHeapPriorityQueue<>();
        priorityQueue.add(new EntryPQ(getVertex(originVertex), 0, null));
        boolean done = false;

        while (!done && !priorityQueue.isEmpty()) {
            EntryPQ frontEntry = priorityQueue.remove();
            VertexInterface<T> frontVertex = frontEntry.getVertex();

            if (!frontVertex.isVisited()) {
                frontVertex.visit();
                frontVertex.setCost(frontEntry.getCost());
                frontVertex.setPredecessor(frontEntry.getPredecessor());

                if (frontVertex.getLabel().equals(endVertex)) {
                    done = true;
                } else {
                    Iterator<VertexInterface<T>> neighbors = frontVertex.getNeighborIterator();
                    Iterator<Double> weights = frontVertex.getWeightIterator();

                    while (neighbors.hasNext()) {
                        VertexInterface<T> nextNeighbor = neighbors.next();
                        double weightOfEdgeToNeighbor = weights.next();

                        if (!nextNeighbor.isVisited()) {
                            double nextCost = weightOfEdgeToNeighbor + frontVertex.getCost();

                            priorityQueue.add(new EntryPQ(nextNeighbor, nextCost, frontVertex));
                        }
                    }
                }
            }
        }

        // Traversal ends; construct the cheapest path
        double pathCost = getVertex(endVertex).getCost();
        buildPath(endVertex, path);

        return pathCost;
    }

    // Helper method to build the path stack
    private void buildPath(T endVertex, StackInterface<T> path) {
        path.clear();
        VertexInterface<T> end = getVertex(endVertex);

        while (end != null) {
            path.push(end.getLabel());
            end = end.getPredecessor();
        }
    }

    // Inner class to represent entries in the priority queue
    private class EntryPQ implements Comparable<EntryPQ> {
        private VertexInterface<T> vertex;
        private double cost;
        private VertexInterface<T> predecessor;

        public EntryPQ(VertexInterface<T> vertex, double cost, VertexInterface<T> predecessor) {
            this.vertex = vertex;
            this.cost = cost;
            this.predecessor = predecessor;
        }

        public VertexInterface<T> getVertex() {
            return vertex;
        }

        public double getCost() {
            return cost;
        }

        public VertexInterface<T> getPredecessor() {
            return predecessor;
        }

        @Override
        public int compareTo(EntryPQ other) {
            return Double.compare(this.cost, other.cost);
        }
    }
	
	
	
	
	
	public VertexInterface<T> getVertex(T label) {
        return vertices.getValue(label);
    }

	@Override
	public QueueInterface<T> getDepthFirstTraversal(T origin) {
		throw new UnsupportedOperationException("Unimplement method 'getDepthFirstTraversal'");
	}

	@Override
	public StackInterface<T> getTopologicalOrder() {
		throw new UnsupportedOperationException("Unimplement method 'getTopologicalOrder'");
	}

	@Override
	public int getShortestPath(T begin, T end, StackInterface<T> path) {
		throw new UnsupportedOperationException("Unimplement method 'getShortestPath'");
	}
}
